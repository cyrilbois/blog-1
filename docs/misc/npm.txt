https://medium.freecodecamp.org/how-to-make-a-beautiful-tiny-npm-package-and-publish-it-2881d4307f78
https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry
https://docs.npmjs.com/creating-and-publishing-private-packages


npm is the standard package manager installed with Node.js. It consists of a command-line tool
that gives you access to a world of javasckript libraries or so called packages.

```
npm -v                    # display version of npm
npm init -y               # initialize project in folder
npm i packagename(s)      # installs package(s)
npm remove packagename(s) # removes installed packages
npm ls                    # lists installed packages and dependencies
npm install -g npm        # upgrade npm version
npm list -g --depth=0     # list root level global packages
```

## package.json

The package.json file stores information about your project like the name, version,
dependencies etc. You can initialize a new project by running `npm init -y` in your project
folder. In more recent versions of npm any installed packages are stored by default in
the dependencies section of package.json. Earlier version required param `--save`.

Yarn was released when npn was at v3 to address slowness among other things.
Today they're in general equally fast but as npm have focused on security a lot lately you
should prefer npm to yarn these days.


## Deploying your package to npm

* Check name, version  and that main points to your main file.
* Scripts section can be removed if you don't have tests
* Add a README.md-file describing the package

npm whoami

npm login
npm adduser

show ver: npm version
update ver of your pkg: npm version 1.0.1

## Publishing your package

before publish, verify package name is unique. Chances are your package name isn't available.
If you have private npm you can use your npm name or organization name to prefix the name. @attracs/awesomepkg or @kajlund/awesomepkg.
If you don't you explicitly need to add access=public param when publishing.
npm publish or npm publish --access=public

Given a version number MAJOR.MINOR.PATCH, increment the:
1. MAJOR version when you make incompatible API changes,
2. MINOR version when you add functionality in a backwards-compatible manner, and
3. PATCH version when you make backwards-compatible bug fixes.
Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.
https://semver.org
Publishing: The